== Usage

=== Prerequisites

First you need to start the `stampede` application
itself.

.Start the `stampede` application

[source,erlang]
----
ok=application:start(stampede).
----

Before you can start stampeding a target application or
supervisor, that application or supervisor must be running.

.Start the `my_app` application

[source,erlang]
----
{ok, _}=application:ensure_all_started(my_app).
----

=== Starting stampedes

Now you can start a stampede on the target application or supervisor.
To actually start killing anything, the stampede must be activated, see below.

.Start stampeding the `my_app` application

[source,erlang]
----
{ok, _}=stampede:start_herd(my_stampede, {application, my_app}).
----

This will stampede the target application with default options,
which is one kill in 5 seconds, and any process belonging to it
being killable.

By specifying custom options, you may change the kill interval and
also influence what is being killed and what is not with a custom
before-kill callback. The `stampede_callbacks` module has functions
to generate some often needed callback functions.

.Start stampeding the `my_app` application with a 1-2s interval and exclude supervisors

[source,erlang]
----
NotIfSup=stampede_callbacks:if_not(stampede_callbacks:if_supervisor()).
{ok, _}=stampede:start_herd(my_stampede, {application, my_app}, #{interval => {1000, 2000}, before_kill => NotIfSup}).
----

It is also possible to stampede multiple applications or supervisors in parallel. Just
start a stampede for any application you want to target.

.Start stampeding the `my_app` and `my_other_app` applications

[source,erlang]
----
{ok, _}=stampede:start_herd(my_stampede, {application, my_app}),
{ok, _}=stampede:start_herd(my_other_stampede, {application, my_other_app}).
----

=== Activating and deactivating stampedes

After being started, a stamepde is still inactive. This means that the tracer is
running, keeping track of the processes and ports belonging to the specified
application or supervisor, but nothing is being killed.

.Activating the `my_stampede` stampede

[source,erlang]
----
ok=stampede:activate(my_stampede).
----

.Deactivate the `my_stampede` stampede

[source,erlang]
----
ok=stampede:deactivate(my_stampede).
----

=== Getting and setting the options of running stampedes

You can retrieve the options set for a running stampede with `stampede:get_opts/1`.

.Get the options of the `my_stampede` stampede

[source,erlang]
----
Opts=stampede:get_opts(my_stampede).
----

You can change the options of a running stampede with `stampede:set_opts/2`. Options
not specified will be set to the defaults (ie, an `interval` of `{5000, 5000}` and/or
a `before_kill` callback that always returns `true`).

.Set the options of the `my_stampede` stampede

[source,erlang]
----
ok=stampede:set_opts(my_stampede, NewOpts).
----

.Changing only the `interval` option of the `my_stampede` stampede 

[source,erlang]
----
OldOpts=stampede:get_opts(my_stampede),
NewOpts=OldOpts#{interval => {1000, 2000},
ok=stampede:set_opts(my_stampede, NewOpts).
----

=== Stopping stampedes

When you decide you have stampeded the target application enough, you may stop
the stampede targeting it.

.Stop the `my_stampede` stampede

[source,erlang]
----
ok=stampede:stop_herd(my_stampede).
----

If you have multiple stampedes running, it is also possible to stop them all at once.

.Stop all stampedes

[source,erlang]
----
ok=stampede:stop_all().
----

=== Notes ===

If the target supervisor or the top supervisor of the target application exits, the stampede
targeting it will crash. While stampede itself will not kill the target supervisor or the
top supervisor of the target application, it may still crash due to their restart limits
being reached as an effect of their child processes being killed too fast by a stampede.
