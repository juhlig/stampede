= stampede(3)

== Name

stampede - Erlang Resilience Testing

== Description

The `stampede` module provides functions for starting and
stopping the killing of processes and ports belonging to a given
application or supervisor.

== Exports

* link:man:stampede:start_herd(3)[stampede:start_herd(3)] - Start a stampede
* link:man:stampede:stop_herd(3)[stampede:stop_herd(3)] - Stop a stampede
* link:man:stampede:stop_all(3)[stampede:stop_all(3)] - Stop all stampedes
* link:man:stampede:set_opts(3)[stampede:set_opts(3)] - Change the options of a running stampede
* link:man:stampede:get_opts(3)[stampede:get_opts(3)] - Get the options of a running stampede

== Types

[source,erlang]
----
interval() = {
    non_neg_integer(),
    non_neg_integer()
}
----

Minimum and maximum time between kills.

[source,erlang]
----
callback() = fun((pid() | port()) -> boolean()
----

A function which is called before each kill, to decide if it is allowed to kill the
given process or port.

[source,erlang]
----
opts() = #{
	interval => interval(),
	before_kill => callback()
}
----

Stampede options.

The options control the behavior of the stampede.

None of the stampede options is required.

interval ({5000, 5000}) ::

Minimum and Maximum time between kills.

before_kill (stampede_callbacks:any()) ::

Function to be called before each kill, to decide if killing of the given pid
or port is allowed.

== Changelog

* *0.3.0*: Added port killing. `before_kill` callback functions must also
           accept ports now.
* *0.4.0*: Added ability to retrieve and change the options of running stampedes.

== See also

link:man:stampede_callbacks(3)[stampede_callbacks(3)] - Callback generators
